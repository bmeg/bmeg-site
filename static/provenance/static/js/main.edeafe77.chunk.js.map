{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["viewUtilities","Cytoscape","jquery","App","state","selection","_handleCyCalled","handleCy","cy","_cy","layout","name","props","dataset","on","event","setState","target","data","selectedEles","$","reduce","accumulator","ele","push","api","neighbor","node","closedNeighborhood","union","successors","predecessors","neighborSelectTime","run","enableMarqueeZoom","length","zoom","level","position","console","log","zoomToSelected","e","disableMarqueeZoom","marqueeZoom","highlightNeighbors","removeHighlights","hideSelected","nodesWithHiddenNeighbor","edges","connectedNodes","thinBorder","hide","thickenBorder","hideUnSelected","showAll","show","elements","redraw","remove","help","window","M","toast","html","fetch","this","url","then","response","json","eles","forEach","defaultBorderWidth","Number","css","substring","columns","map","key","Header","accessor","className","href","onClick","stylesheet","selector","style","opacity","shape","width","height","display","overflow","React","Component","Boolean","location","hostname","match","graph","document","getElementById","ReactDOM","render","addEventListener","attachEvent","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edeafe77.chunk.js","sourcesContent":["import React from 'react';\n\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\n\nimport Cytoscape from 'cytoscape';\nimport jquery from 'jquery';\nimport viewUtilities from 'cytoscape-view-utilities';\nviewUtilities(Cytoscape, jquery)\n\nclass App extends React.Component {\n\n  state = {\n      // selected node or edge\n      selection: []\n  }\n  _handleCyCalled = false;\n\n  componentDidMount() {\n    // get data, assumed to be cytoscape friendly, parse into an array of obj\n    fetch(this.props.dataset.url)\n      .then(response => response.json())\n      .then(data => {\n          this.setState({ 'elements': data })\n      });\n  }\n\n  handleCy = cy => {\n    // cy setup\n    if (cy === this._cy && this._handleCyCalled) {\n      return;\n    }\n    this._cy = cy;\n    this._handleCyCalled = true;\n    this.layout= cy.layout(\n      {name: this.props.dataset.layout}\n    )\n    cy.on('tap', 'edge', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n    cy.on('tap', 'node', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n    cy.on('select', event => {\n      // get the graph data behind all selected elements\n      var selectedEles = this._cy.$(\":selected\");\n      const reducer = (accumulator, ele) => {\n        if (ele) {\n            accumulator.push(ele.data());\n        }\n        return accumulator;\n      }\n      this.setState({ 'selection': selectedEles.reduce(reducer,[]) })\n    })\n    this.api = cy.viewUtilities({\n        neighbor: function(node){\n            // get entire 'traversal'\n            return node.closedNeighborhood().union(\n              node.successors()\n            ).union(\n              node.predecessors()\n            );\n        },\n        neighborSelectTime: 500\n    });\n\n    this.layout.run()\n    this.api.enableMarqueeZoom();\n\n    var selectedEles = cy.$(\":selected\");\n    if (selectedEles.length > 0) {\n      cy.zoom({\n        level: .40,\n        position: selectedEles[0].position()\n      });\n      this.setState({ selection: [selectedEles[0].data()] });\n    } else {\n      console.log('no selected element at startup')\n    }\n\n  }\n\n  //\n  // button handlers\n  //\n  // Increase border width to show nodes with hidden neighbors\n  thickenBorder(eles){\n    eles.forEach(function( ele ){\n      var defaultBorderWidth = Number(ele.css(\"border-width\").substring(0,ele.css(\"border-width\").length-2));\n      ele.css(\"border-width\", defaultBorderWidth + 2);\n    });\n    return eles;\n  }\n  // Decrease border width when hidden neighbors of the nodes become visible\n  thinBorder(eles){\n    eles.forEach(function( ele ){\n      var defaultBorderWidth = Number(ele.css(\"border-width\").substring(0,ele.css(\"border-width\").length-2));\n      ele.css(\"border-width\", defaultBorderWidth - 2);\n    });\n    return eles;\n  }\n  zoomToSelected = e => {\n    this.api.disableMarqueeZoom();\n    var selectedEles = this._cy.$(\":selected\");\n    this.api.zoomToSelected(selectedEles);\n  }\n  marqueeZoom = e => {\n    this.api.enableMarqueeZoom();\n  }\n  highlightNeighbors = e => {\n    this.api.disableMarqueeZoom();\n    if(this._cy.$(\":selected\").length > 0){\n      this.api.highlightNeighbors(this._cy.$(\":selected\"));\n    }\n\n  }\n  removeHighlights = e => {\n    this.api.disableMarqueeZoom();\n    this.api.removeHighlights();\n  }\n  hideSelected = e => {\n    this.api.disableMarqueeZoom();\n    var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thinBorder(nodesWithHiddenNeighbor);\n    this.api.hide(this._cy.$(\":selected\"));\n    nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thickenBorder(nodesWithHiddenNeighbor);\n  }\n  hideUnSelected = e => {\n    this.api.disableMarqueeZoom();\n    var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thinBorder(nodesWithHiddenNeighbor);\n    this.api.hide(this._cy.$(\":unselected\"));\n    nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thickenBorder(nodesWithHiddenNeighbor);\n  }\n  showAll = e => {\n    this.api.disableMarqueeZoom();\n    var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thinBorder(nodesWithHiddenNeighbor);\n    this.api.show(this._cy.elements());\n  }\n  redraw = e => {\n    this._cy.remove(\":hidden\")\n    this._cy.remove( this._cy.edges(\":hidden\") )\n    this.layout = this._cy.layout(\n      {name: this.props.dataset.layout}\n    )\n    this.layout.run();\n  }\n  help = e => {\n    window.M.toast({html: '<i>SHIFT + drag to specify region.  SHIFT + taphold to select neighbors</i>'})\n  }\n\n  render() {\n    if (! this.state.elements) {\n        return <div/>;\n    }\n\n    const keys = ['_label', 'cmd', 'path'];\n    const columns = keys.map((key) => {return { Header: key, accessor: key }});\n\n    return <div >\n    <div>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul className=\"hide-on-med-and-down\">\n            <li><a href=\"#/\" onClick={this.hideSelected}><i className=\"fas fa-eye left\"></i>Hide Selected</a></li>\n            <li><a href=\"#/\" onClick={this.hideUnSelected}><i className=\"fas fa-eye-slash left\"></i>Hide Unselected</a></li>\n            <li><a href=\"#/\" onClick={this.showAll}><i className=\"material-icons left\">all_inclusive</i>Show All</a></li>\n            <li><a href=\"#/\" onClick={this.zoomToSelected}><i className=\"material-icons left\">zoom_in</i>Zoom To Selected</a></li>\n            <li><a href=\"#/\" onClick={this.marqueeZoom}><i className=\"material-icons left\">select_all</i>Marquee Zoom</a></li>\n            <li><a href=\"#/\" onClick={this.highlightNeighbors}><i className=\"fas fa-highlighter left\"></i>Highlight Neighbors</a></li>\n            <li><a href=\"#/\" onClick={this.removeHighlights}>\n              <i className=\"far fa-highlighter left\"></i>\n              Remove Highlights</a></li>\n            <li><a href=\"#/\" onClick={this.redraw}><i className=\"material-icons left\">refresh</i>Re-Draw</a></li>\n            <li><a href=\"#/\" onClick={this.help}><i className=\"material-icons left\">help</i>Help</a></li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n\n    <div>\n      <CytoscapeComponent\n        elements={this.state.elements}\n        stylesheet={[\n          {\n            selector: 'node.unhighlighted',\n            style: {\n              opacity: 0.3\n            }\n          },\n          {\n            selector: 'edge.unhighlighted',\n            style: {\n              opacity: 0.3\n            }\n          },\n          {\n            selector: 'node[path]',\n            style: {\n              shape: 'barrel'\n            }\n          },\n          {\n            selector: 'node[cmd]',\n            style: {\n              shape: 'triangle'\n            }\n          },\n          {\n            selector: 'edge',\n            style: {\n              width: 1\n            }\n          }\n        ]}\n        style={ {\n          height:  this.props.dataset.height,\n          width: this.props.dataset.width,\n          display: 'block',\n          overflow: 'scroll'\n        } }\n        cy={this.handleCy}\n      />\n    </div>\n\n    <div>\n      <ReactTable\n        data={ this.state.selection }\n        columns = { columns }\n      />\n    </div>\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nfunction run() {\n  // get div where Graph should be rendered\n  const graph = document.getElementById('graph')\n  if (graph) {\n    // get parameters set by caller on element data-* attributes\n    const dataset = graph.dataset ;\n    ReactDOM.render(<App dataset={dataset}/>, graph);\n  }\n}\n\n// mount react on page load\nif (window.addEventListener) {\n  window.addEventListener('DOMContentLoaded', run);\n} else {\n  window.attachEvent('onload', run);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}