{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selection","foo","_handleCyCalled","handleCy","cy","_this","_cy","window","on","event","setState","target","data","console","log","this","columns","Object","keys","map","key","id","Header","accessor","react_default","a","createElement","react_cytoscape_default","elements","label","position","x","y","parent","source","style","width","height","layout","name","es","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAgIeA,oNApHbC,MAAQ,CACJC,UAAW,CAAC,CAACC,IAAO,WAExBC,iBAAkB,IAElBC,SAAW,SAAAC,GACLA,IAAOC,EAAKC,KAAOD,EAAKH,kBAG5BG,EAAKC,IAAMF,EACXG,OAAOH,GAAKA,EACZC,EAAKH,iBAAkB,EACvBE,EAAGI,GAAG,MAAO,OAAQ,SAAAC,GACnBJ,EAAKK,SAAS,CAAEV,UAAW,CAACS,EAAME,OAAOC,YAE3CR,EAAGI,GAAG,MAAO,OAAQ,SAAAC,GACnBJ,EAAKK,SAAS,CAAEV,UAAW,CAACS,EAAME,OAAOC,sFA4E3CC,QAAQC,IAAIC,KAAKhB,MAAMC,WACvB,IAAMgB,EAAUC,OAAOC,KAAKH,KAAKhB,MAAMC,UAAU,IAAImB,IAAI,SAACC,EAAKC,GAC7D,MAAO,CACLC,OAAQF,EACRG,SAAUH,KAId,OAAOI,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,SAhFa,CACZ,CACIhB,KAAM,CAACS,GAAI,MAAOQ,MAAO,UACzBC,SAAU,CAACC,EAAG,GAAIC,EAAG,KAEzB,CACIpB,KAAM,CAACS,GAAI,MAAOQ,MAAO,UACzBC,SAAU,CAACC,EAAG,IAAKC,EAAG,MAE1B,CACIpB,KAAM,CAACS,GAAI,QAASQ,MAAO,UAC3BC,SAAU,CAACC,EAAG,IAAKC,EAAG,MAE1B,CACIpB,KAAM,CAACS,GAAI,OAAQQ,MAAO,UAC1BC,SAAU,CAACC,EAAG,IAAKC,EAAG,KAE1B,CACIpB,KAAM,CAACS,GAAI,OAAQQ,MAAO,UAC1BC,SAAU,CAACC,EAAG,IAAKC,EAAG,MAE1B,CACIpB,KAAM,CAACS,GAAI,MAAOQ,MAAO,SAAUI,OAAQ,SAC3CH,SAAU,CAACC,EAAG,IAAKC,EAAG,MAG1B,CAACpB,KAAM,CACHsB,OAAQ,MACRvB,OAAQ,MACRkB,MAAO,6BAEX,CAACjB,KAAM,CACHsB,OAAQ,MACRvB,OAAQ,OACRkB,MAAO,+BAEX,CAACjB,KAAM,CACHsB,OAAQ,MACRvB,OAAQ,OACRkB,MAAO,+BAEX,CAACjB,KAAM,CACHsB,OAAQ,QACRvB,OAAQ,OACRkB,MAAO,+BAEX,CAACjB,KAAM,CACHsB,OAAQ,QACRvB,OAAQ,MACRkB,MAAO,+BAEX,CAACjB,KAAM,CACHsB,OAAQ,OACRvB,OAAQ,OACRkB,MAAO,+BAEX,CAACjB,KAAM,CACHsB,OAAQ,OACRvB,OAAQ,MACRkB,MAAO,+BAEX,CAACjB,KAAM,CACHsB,OAAQ,OACRvB,OAAQ,MACRkB,MAAO,gCAiBZM,MAAQ,CAAEC,MAAO,QAASC,OAAQ,SAClCC,OAAS,CAACC,KAAM,UAChBnC,GAAIW,KAAKZ,WAEXqB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACE5B,KAAOG,KAAKhB,MAAMC,UAClBgB,QAAYA,YA9GFyB,IAAMC,YCCJC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.efe1b470.chunk.js","sourcesContent":["import CytoscapeComponent from 'react-cytoscapejs';\nimport React from 'react';\n\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\n\n\n// import COSEBilkent from 'cytoscape-cose-bilkent';\n// import Cytoscape from 'cytoscape';\n// Cytoscape.use(COSEBilkent);\n\nclass App extends React.Component {\n  state = {\n      selection: [{'foo': 'bar'}]\n  }\n  _handleCyCalled = false;\n\n  handleCy = cy => {\n    if (cy === this._cy && this._handleCyCalled) {\n      return;\n    }\n    this._cy = cy;\n    window.cy = cy;\n    this._handleCyCalled = true;\n    cy.on('tap', 'edge', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n    cy.on('tap', 'node', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n\n  }\n\n  render() {\n    const elements = [\n         {\n             data: {id: 'one', label: 'Node 1'},\n             position: {x: 50, y: 50}\n         },\n         {\n             data: {id: 'two', label: 'Node 2'},\n             position: {x: 200, y: 200}\n         },\n         {\n             data: {id: 'three', label: 'Node 3'},\n             position: {x: 100, y: 150}\n         },\n         {\n             data: {id: 'four', label: 'Node 4'},\n             position: {x: 400, y: 50}\n         },\n         {\n             data: {id: 'five', label: 'Node 5'},\n             position: {x: 250, y: 100}\n         },\n         {\n             data: {id: 'six', label: 'Node 6', parent: 'three'},\n             position: {x: 150, y: 150}\n         },\n\n         {data: {\n             source: 'one',\n             target: 'two',\n             label: 'Edge from Node1 to Node2'\n         }},\n         {data: {\n             source: 'one',\n             target: 'five',\n             label: 'Edge from Node 1 to Node 5'\n         }},\n         {data: {\n             source: 'two',\n             target: 'four',\n             label: 'Edge from Node 2 to Node 4'\n         }},\n         {data: {\n             source: 'three',\n             target: 'five',\n             label: 'Edge from Node 3 to Node 5'\n         }},\n         {data: {\n             source: 'three',\n             target: 'two',\n             label: 'Edge from Node 3 to Node 2'\n         }},\n         {data: {\n             source: 'four',\n             target: 'four',\n             label: 'Edge from Node 4 to Node 4'\n         }},\n         {data: {\n             source: 'four',\n             target: 'six',\n             label: 'Edge from Node 4 to Node 6'\n         }},\n         {data: {\n             source: 'five',\n             target: 'one',\n             label: 'Edge from Node 5 to Node 1'\n         }},\n    ];\n\n    // const layout = { name: 'cose-bilkent' };\n    // layout={layout}\n    console.log(this.state.selection)\n    const columns = Object.keys(this.state.selection[0]).map((key, id)=>{\n      return {\n        Header: key,\n        accessor: key\n      }\n    })\n\n    return <div>\n      <CytoscapeComponent\n        elements={elements}\n        style={ { width: '400px', height: '400px' } }\n        layout={ {name: 'random'} }\n        cy={this.handleCy}\n      />\n      <ReactTable\n        data={ this.state.selection }\n        columns = { columns }\n      />\n    </div>;\n  }\n}\n\n// ReactDOM.render( React.createElement(App, document.getElementById('root') ));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}