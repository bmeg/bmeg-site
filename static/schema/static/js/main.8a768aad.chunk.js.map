{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selection","error","graph","graphs","elements","nodess","edges","cyElements","handleSelect","bind","assertThisInitialized","schemaQuery","listGraphs","build","_this2","console","log","fetch","method","then","response","ok","err","url","status","statusText","setState","json","filter","g","endsWith","map","x","replace","catch","_this3","data","id","label","source","target","classes","nodes","schema","event","value","nextProps","nextState","_this4","_","isEqual","cy","cytoscape","container","document","getElementById","boxSelectionEnabled","autounselectify","minZoom","maxZoom","style","stylesheet","selector","css","height","width","background-fit","background-color","border-color","font-size","border-width","border-opacity","text-valign","target-arrow-shape","line-color","target-arrow-color","curve-style","edge-text-rotation","layout","name","on","targetEdge","i","length","gid","targetVertex","vertices","optionItems","react_default","a","createElement","key","cyStyle","dataset","margin","borderStyle","borderColor","borderWidth","fontSize","display","onChange","disabled","color","textAlign","main_default","src","enableClipboard","displayDataTypes","Component","Boolean","window","location","hostname","match","run","ReactDOM","render","src_App_0","addEventListener","attachEvent","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a768aad.chunk.js","sourcesContent":["import cytoscape from \"cytoscape\";\nimport React, { Component } from 'react';\nimport ReactJson from 'react-json-view';\nimport _ from \"underscore\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selection: {},\n      error: \"\",\n      graph: \"\",\n      graphs: [],\n      elements: {\n        nodess: [],\n        edges: [],\n      },\n      cyElements: null\n    }\n\n    this.handleSelect = this.handleSelect.bind(this);\n    this.schemaQuery = this.schemaQuery.bind(this);\n    this.listGraphs = this.listGraphs.bind(this);\n    this.build = this.build.bind(this);\n  }\n\n  listGraphs() {\n    console.log(\"listing graphs...\")\n    fetch( \"/v1/graph\", {\n      method: \"GET\",\n    }).then(function(response) {\n      if (!response.ok) {\n        var err = \"GET \" + response.url + \" \" + response.status + \" \" + \n            response.statusText\n        this.setState({error: err})\n        console.log(\"ERROR:\", err)\n      }\n      return response.json()\n    }.bind(this)).then(function(json) {\n      var graphs = json['graphs'].filter(function(g) {\n\t\t\t\t\treturn g.endsWith(\"__schema__\")\n\t\t\t}).map(x => x.replace(\"__schema__\", \"\"))\n      console.log(\"found graphs:\", graphs)\n      this.setState({graphs: graphs})\n    }.bind(this)).catch(err => {\n      console.log(\"ERROR:\", err)\n      err = \"No graphs found\"\n      this.setState({error: err});\n    })\n  }\n\n  schemaQuery(graph) {\n    console.log(\"Getting the schema for graph: \", graph)\n    fetch( \"/v1/graph/\" + graph + \"/schema\", {\n      method: \"GET\",\n    }).then(function(response) {\n      if (!response.ok) {\n        var err = \"GET \" + response.url + \" \" + response.status + \" \" + \n            response.statusText\n        this.setState({error: err})\n        console.log(\"ERROR:\", err)\n      }\n      return response.json()\n    }.bind(this)).then(function(json) {\n      var edges = json[\"edges\"].map(function(x){\n        return {\n          \"data\": {\n            \"id\": x[\"gid\"], \n            \"label\": x[\"label\"], \n            \"source\": x[\"from\"], \n            \"target\": x[\"to\"]\n          }, \n          \"classes\": \"autorotate\"\n        }\n      })\n      var nodes = json[\"vertices\"].map(function(x){\n        return {\"data\": {\"id\": x[\"gid\"]}}\n      })\n      this.setState({elements: {\"nodes\": nodes, \"edges\": edges}, schema: json})\n    }.bind(this)).catch(err => {\n      err = \"Failed to load the schema: \" + err\n      this.setState({error: err})\n      console.log(\"ERROR:\", err)\n    })\n    console.log(\"Loaded the schema for graph: \", graph)\n  }\n\n  // handle graph selections\n  handleSelect(event) {\n    console.log(\"selected graph:\", event.target.value)\n    this.setState({graph: event.target.value, error: \"\", selection: {}});\n    this.schemaQuery(event.target.value);\n  }\n\n  componentDidMount() {\n    this.listGraphs();\n  \tthis.build();\n  }\n\n  componentDidUpdate() {\n  \tthis.build();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return true\n  }\n\n  build() {\n    if (_.isEqual(this.state.graph, \"\")) {\n      return\n    }\n    if (_.isEqual(this.state.elements, this.state.cyElements)) {\n      return\n    }\n\n    console.log(\"Cytoscape.js is rendering the graph...\");\n\n    var cy = cytoscape(\n      {\n        container: document.getElementById(\"cy\"),\n\n        boxSelectionEnabled: false,\n        autounselectify: false,\n\n        minZoom: 0.1,\n        maxZoom: 10,\n\n        elements: this.state.elements,\n\n        style: cytoscape.stylesheet()\n          .selector(\"node\")\n          .css({\n            \"height\": 80,\n            \"width\": 80,\n            \"background-fit\": \"cover\",\n            'background-color': \"#bcbcbc\",\n            \"border-color\": \"#bcbcbc\",\n            \"font-size\": \"14px\",\n            \"border-width\": 3,\n            \"border-opacity\": 1,\n            \"text-valign\": \"center\",\n            \"label\": \"data(id)\"\n          })\n          .selector(\"node:selected\")\n          .css({\n            'background-color': \"#4286f4\",\n            \"border-color\": \"#4286f4\",\n          })\n          .selector(\"edge\")\n          .css({\n            \"width\": 6,\n            \"target-arrow-shape\": \"triangle\",\n            \"line-color\": \"#ffaaaa\",\n            \"target-arrow-color\": \"#ffaaaa\",\n            \"curve-style\": \"bezier\",\n            \"label\": \"data(label)\"\n          })\n          .selector(\"edge:selected\")\n          .css({\n            \"line-color\": \"#4286f4\",\n            \"target-arrow-color\": \"#4286f4\",\n          })\n          .selector(\".autorotate\")\n          .css({\n            \"edge-text-rotation\": \"autorotate\"\n          }),\n\n        layout: {\n          name: \"cose\"\n        }\n      }\n    );\n\n    cy.on('tap', 'edge', event => {\n      var targetEdge = event.target.data().id\n      var data = {}\n      for (var i = 0; i < this.state.schema.edges.length; i++) {\n        if (this.state.schema.edges[i].gid === targetEdge) {\n          data = this.state.schema.edges[i]\n        }\n      }\n      this.setState({ selection: data });\n    })\n    cy.on('tap', 'node', event => {\n      var targetVertex = event.target.data().id\n      var data = {}\n      for (var i = 0; i < this.state.schema.vertices.length; i++) {\n        if (this.state.schema.vertices[i].gid === targetVertex) {\n          data = this.state.schema.vertices[i]\n        }\n      }\n      this.setState({ selection: data });\n    })\n    this.cy = cy;\n    this.setState({ cyElements: this.state.elements });\n  }\n\n  render() {\n    let selectStyle = {width: \"15%\", height: \"2em\", fontSize: \"1.25em\", \n                       margin: \"10px auto\", display: \"block\"}\n    let optionItems = this.state.graphs.map(\n      (graph) => <option key={graph}>{graph}</option>\n    )\n    let cyStyle = {\n      height: this.props.dataset.height,\n      width: this.props.dataset.width,\n      margin: \"5px auto\",\n      borderStyle: \"solid\",\n      borderColor: \"#D3D3D3\",\n      borderWidth: \"thin\"\n    };\n    return (\n      <div>\n        <div id=\"selectGraph\">\n          <select style={selectStyle} value={this.state.graph} onChange={this.handleSelect}>\n            <option value=\"\" disabled>Select Graph</option>\n            {optionItems}\n          </select>\n        </div>\n        <div id=\"errorMessage\">\n          <h4 style={{color: \"red\", textAlign: \"center\"}}>ERROR: {this.state.error}</h4>\n        </div>\n        <div style={cyStyle} id=\"cy\"></div>\n        <div style={{width: this.props.dataset.width, margin: \"5px auto\"}} id=\"reactJson\">\n          <ReactJson src={this.state.selection} name={false}  enableClipboard={false} displayDataTypes={false}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction run() {\n  // get div where Graph should be rendered\n  const schema = document.getElementById('schema')\n  if (schema) {\n    // get parameters set by caller on element data-* attributes\n    const dataset = schema.dataset;\n    console.log(\"schema\", schema);\n    ReactDOM.render(<App dataset={dataset}/>, schema);\n  }\n}\n\n// mount react on page load\nif (window.addEventListener) {\n  window.addEventListener('DOMContentLoaded', run);\n} else {\n  window.attachEvent('onload', run);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}